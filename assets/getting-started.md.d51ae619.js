import{_ as e,c as r,o as a,a as t}from"./app.38a86303.js";const _=JSON.parse('{"title":"写在前面","description":"","frontmatter":{},"headers":[{"level":2,"title":"有过忧虑吗","slug":"有过忧虑吗","link":"#有过忧虑吗","children":[]},{"level":2,"title":"规范的意义","slug":"规范的意义","link":"#规范的意义","children":[]},{"level":2,"title":"规范的目的","slug":"规范的目的","link":"#规范的目的","children":[]},{"level":2,"title":"上面都是我抄的，下面才是我的碎碎念（","slug":"上面都是我抄的-下面才是我的碎碎念","link":"#上面都是我抄的-下面才是我的碎碎念","children":[]},{"level":2,"title":"文档简介","slug":"文档简介","link":"#文档简介","children":[]}],"relativePath":"getting-started.md","lastUpdated":1685325124000}'),i={name:"getting-started.md"},l=t('<h1 id="写在前面" tabindex="-1">写在前面 <a class="header-anchor" href="#写在前面" aria-hidden="true">#</a></h1><p>随着人数逐渐增多，我们前端团队也慢慢在变成一支拥有十多人的队伍。而作为一个前端团队所必需的 <code>前端代码规范</code> 却一直缺失，导致各个项目之间大坑小坑不断、多人开发时风格不同意等问题，此文档旨在为大家建立一个统一的规范并试图解决某些大家开发时普遍遇到的疑难杂症。</p><h2 id="有过忧虑吗" tabindex="-1">有过忧虑吗 <a class="header-anchor" href="#有过忧虑吗" aria-hidden="true">#</a></h2><p>你是不是总是在抱怨项目组的各方面不统一，不好维护，千奇百怪？</p><p>你是不是每次提交代码的时候总要拉某某人过来看下各种冲突？</p><p>你是不是每次merge代码的时候总要话很长的时间去解决不同格式的代码冲突？</p><p>你是不是有时候为了解决一个bug好几天没睡好，最终定位的问题也许是一个分号、或是书写规范？ 人人都在恐慌，人人都在责怪他人，但殊不知，换了好几个项目都是类似，想过为什么吗？</p><h2 id="规范的意义" tabindex="-1">规范的意义 <a class="header-anchor" href="#规范的意义" aria-hidden="true">#</a></h2><p>每一种事物都有它被发明时，都会有其用处和目的，每一个事物都是自己擅长和适合的领域； 我们要在对的地方使用它，让它做自己擅长的事。</p><ul><li>规范的代码可以促进团队合作；</li><li>规范的代码可以减少bug处理；</li><li>规范的代码可以降低维护成本；</li><li>规范的代码有助于代码审查；</li><li>养成代码规范的习惯，有助于程序员自身的成长；</li></ul><h2 id="规范的目的" tabindex="-1">规范的目的 <a class="header-anchor" href="#规范的目的" aria-hidden="true">#</a></h2><p>我们知道，当一个团队开始指定并实行编码规范的话，错误就会变得更加显而易见。 如果一段特定的代码不符合规范的话，它有可能只是代码风格错误，而也有可能会是 bug。 早期指定规范就使得代码审核得以更好的开展，并且可以更精确的地定位到错误。 只要开发者们能够保证源代码源文件都严格遵循规范，那接下去所使用的混淆、压缩和编译工具则可投其所好不尽相同。 为了提高工作效率，便于后台人员添加功能及前端后期优化维护，输出高质量的文档。 在项目构建中，使结构更加清晰，代码简明有序，有一个更好的前端架构。</p><h2 id="上面都是我抄的-下面才是我的碎碎念" tabindex="-1">上面都是我抄的，下面才是我的碎碎念（ <a class="header-anchor" href="#上面都是我抄的-下面才是我的碎碎念" aria-hidden="true">#</a></h2><p>当然，由于公司业务的特殊性以及我们团队成员水平的参差不齐，很多页面甚至直接由后端朋友写成，也有很多时候因为项目时间过短导致我自己都不能完全遵循自己一直以来的代码习惯。因此我并不奢求所有人都严格遵循此规范，只是想在大家尽可能遵循规范的前提下减少一些错误。</p><p>文档将大体分为：</p><ul><li><p>前端命名规范</p></li><li><p>前端编码规范</p></li><li><p>前端工具链统一</p></li><li><p>前端起始模板统一</p></li></ul><h2 id="文档简介" tabindex="-1">文档简介 <a class="header-anchor" href="#文档简介" aria-hidden="true">#</a></h2><p>此文档基于 <a href="https://github.com/vuejs/vitepress" target="_blank" rel="noreferrer">VitePress</a> 搭建而成，基于 <a href="https://github.com/FangDingli" target="_blank" rel="noreferrer">本人(方鼎立) github pages</a> 部署。</p><p>文档编写参考 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noreferrer">Airbnb JavaScript Style Guide</a> 、<a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noreferrer">Google JavaScript Style Guide</a>、<a href="https://developer.aliyun.com/article/850913" target="_blank" rel="noreferrer">阿里前端规范2021</a>、<a href="https://github.com/ecomfe/spec" target="_blank" rel="noreferrer">Baidu EFE team 前端开发规范大全</a> 、<a href="https://jdf2e.github.io/jdc_fe_guide/" target="_blank" rel="noreferrer">京东JDC前端代码规范</a>、<a href="https://guide.aotu.io/index.html" target="_blank" rel="noreferrer">京东凹凸实验室前端代码规范</a> 等多个热门前端开源规范并以个人多个项目总结为基础制成。</p>',19),h=[l];function n(d,s,p,o,c,g){return a(),r("div",null,h)}const f=e(i,[["render",n]]);export{_ as __pageData,f as default};
